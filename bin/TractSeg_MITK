#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2017 Division of Medical Image Computing, German Cancer Research Center (DKFZ)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

print("0 Running TractSeg...")

import importlib
import numpy as np
import os
import warnings
import time
import nibabel as nib
from os.path import join

print("1 Running TractSeg...")

from tractseg.libs.Config import Config as C
from tractseg.libs.ExpUtils import ExpUtils
from tractseg.libs.Utils import Utils
from tractseg.libs.DatasetUtils import DatasetUtils
from tractseg.libs.DirectionMerger import DirectionMerger
from tractseg.libs.ImgUtils import ImgUtils

warnings.simplefilter("ignore", UserWarning)    #hide scipy warnings

import SimpleITK as sitk

print("2 Running TractSeg...")
# peaks = sitk.ReadImage("/Volumes/E130-Personal/Wasserthal/HCP/898176/270g_125mm/peaks.nii.gz")
# peaks = sitk.ReadImage("/Volumes/E130-Personal/Wasserthal/HCP/898176/270g_125mm/T1w_acpc_dc_restore_brain.nii.gz")

final_segmentation = peaks
input_data = sitk.GetArrayFromImage(peaks).astype(float)

print("3 Running TractSeg...")


#Settings and Hyperparameters
class HP:
    MODEL = "UNet_Pytorch"     # UNet_Lasagne / UNet_Pytorch
    UNET_NR_FILT = 64
    LOAD_WEIGHTS = False
    WEIGHTS_PATH = ""
    TYPE = "single_direction"       # single_direction / combined

    PREDICT_IMG = False
    PREDICT_IMG_OUTPUT = None
    OUTPUT_MULTIPLE_FILES = False
    TRACTSEG_DIR = "tractseg_output"
    KEEP_INTERMEDIATE_FILES = False
    CSD_RESOLUTION = "LOW"  # HIGH / LOW

    #Rarly changed:
    LABELS_TYPE = np.int16  # Binary: np.int16, Regression: np.float32
    THRESHOLD = 0.5         # Binary: 0.5, Regression: 0.01 ?
    TEST_TIME_DAUG = False
    SLICE_DIRECTION = "x"   #no effect at the moment     # x, y, z  (combined needs z)
    USE_VISLOGGER = False
    INFO = "74 BNew, DMNifti, newSplit, 90gAnd270g, NormBeforeDAug, Fusion: 32gAnd270g"
    SAVE_WEIGHTS = True
    NR_OF_CLASSES = len(ExpUtils.get_bundle_names())
    SEG_INPUT = "Peaks"     # Gradients/ Peaks
    NR_SLICES = 1           # adapt manually: NR_OF_GRADIENTS in UNet.py and get_batch... in train() and in get_seg_prediction()
    PRINT_FREQ = 20
    NORMALIZE_DATA = True
    BEST_EPOCH = 0
    INPUT_DIM = (144, 144)
    VERBOSE = True
    EXP_MULTI_NAME = ""              #CV Parent Dir name # leave empty for Single Bundle Experiment
    EXP_NAME = "HCP_TEST"       # HCP_normAfter
    MULTI_PARENT_PATH = ""
    EXP_PATH = ""
    LEARNING_RATE = 0.002


#Variables set by MITK
# in_image
# peaks = in_image

skip_peak_extraction = False
flip = False
HP.OUTPUT_MULTIPLE_FILES = False
HP.VERBOSE = False
HP.KEEP_INTERMEDIATE_FILES = False
HP.CSD_TYPE = "csd"    # "csd", "csd_msmt", "csd_msmt_5tt"
HP.TRAIN = False
HP.TEST = False
HP.SEGMENT = False
HP.GET_PROBS = False
HP.LOAD_WEIGHTS = True
# if flip:
#     HP.WEIGHTS_PATH = join(C.TRACT_SEG_HOME, "pretrained_weights_Mir_v1.npz")
# else:
#     HP.WEIGHTS_PATH = join(C.TRACT_SEG_HOME, "pretrained_weights_v1.npz")

HP.WEIGHTS_PATH = "../pretrained_weights_v1.npz"
ModelClass = getattr(importlib.import_module("tractseg.models." + HP.MODEL), HP.MODEL)   # run early before code changes in background

start_time = time.time()
data, transformation = DatasetUtils.pad_and_scale_img_to_square_img(input_data, target_size=144)

model = ModelClass(HP)
seg_xyz, gt = DirectionMerger.get_seg_single_img_3_directions(HP, model, data=data, scale_to_world_shape=False)
seg = DirectionMerger.mean_fusion(HP.THRESHOLD, seg_xyz, probs=False)

seg = DatasetUtils.cut_and_scale_img_back_to_original_img(seg, transformation)
ExpUtils.print_verbose(HP, "Took {}s".format(round(time.time() - start_time, 2)))


final_segmentation = sitk.GetImageFromArray(seg.astype(np.uint8))
final_segmentation.SetSpacing(peaks.GetSpacing())
final_segmentation.SetOrigin(peaks.GetOrigin())
final_segmentation.SetDirection(peaks.getDirection())
# final_segmentation.SetSize(peaks.GetSize())

# final_segmentation = nib.Nifti1Image(seg, data_img.get_affine())
# nib.save(img, join(HP.PREDICT_IMG_OUTPUT, "bundle_segmentations.nii.gz"))

